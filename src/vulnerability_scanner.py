from typing import List, Dict, Any
from langchain_core.messages import HumanMessage
from langchain_openai import ChatOpenAI, OpenAIEmbeddings
from langchain_community.vectorstores import Chroma
from langgraph.prebuilt import create_react_agent
from status_logger import logger
from dotenv import load_dotenv
import json


load_dotenv()

def create_best_practices_agent():
    tools = [
        
    ]
    llm = ChatOpenAI(model="gpt-4", temperature=0.0)
    llm_with_system = llm.bind(system_message="""
You are a Secure Coding Advisor. Given a code snippet:
1. First call fetch_best_practices to retrieve language- and framework-specific secure coding guidelines.
2. Then call generate_recommendations to produce concrete, prioritized remediation steps.
3. Finally, summarize both the guidelines and steps in a clear, actionable response.
Always focus on precision and clarity.
""")
    return create_react_agent(
        tools=tools,
        model=llm_with_system,
        verbose=True
    )
