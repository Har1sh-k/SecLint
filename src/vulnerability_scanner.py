from typing import List, Dict, Any
from langchain_core.messages import HumanMessage
from langchain_openai import ChatOpenAI, OpenAIEmbeddings
from langchain_community.vectorstores import Chroma
from langgraph.prebuilt import create_react_agent
from status_logger import logger
from dotenv import load_dotenv
import json

from tools.vuln_tools import understand_context,fetch_secure_coding_guidelines, generate_recommendations

tools = [
    understand_context,
    fetch_secure_coding_guidelines,
    generate_recommendations,
]

def create_secure_coding_agent():
    llm = ChatOpenAI(model="gpt-4o", temperature=0.0)
    system_prompt = """You are a Secure Coding Agent. Use the following tools in order:
    1. understand_context: analyze & store snippet context in memory.
    2. fetch_secure_coding_guidelines: pull relevant secure-coding guidelines.
    3. generate_recommendations: produce concrete remediation steps.
    Always reference stored context when generating recommendations, and focus on clarity.
    Remember, if you encounter a code snippet that is not relevant to security, respond with "No security issues found.
    """
    agent_llm = llm.bind(system_message=system_prompt)
    return create_react_agent(tools=tools, model=agent_llm)

def code_scanner(code_chunks: List[str]):
    """
    Scans code chunks for vulnerabilities and generates recommendations.
    
    Args:
        code_chunks (List[str]): List of code snippets to scan.
        
    Returns:
        List[Dict[str, Any]]: List of dictionaries containing code snippet, context, best practices, and recommendations.
    """
    agent = create_secure_coding_agent()
    results: List[Dict[str, str]] = []

    for chunk in code_chunks:
        logger("info", f"Processing code snippet:...") 

        code = chunk.get("code")
        if not code:
            logger("error", "chunk missing 'code'; skipping")
            continue
        try:
            response = agent.invoke({"messages": [HumanMessage(content=code)]})
        except Exception as e:
            logger("error", f"Agent invocation failed: {e}")
            continue

        recs = {"code": code, "context": "", "best_practices": "", "recommendations": ""}
        for msg in response.get("messages", []):
            if getattr(msg, "tool", None) == "understand_context":
                recs["context"] = msg.content
            elif getattr(msg, "tool", None) == "fetch_secure_coding_guidelines":
                recs["best_practices"] = msg.content
            elif getattr(msg, "tool", None) == "generate_recommendations":
                recs["recommendations"] = msg.content
        
        results.append(recs)
        break # For testing, break after first chunk
        
    print("\n Secure Coding Scan Results ")
    print("=" * 60)
    print(json.dumps(results, indent=2, ensure_ascii=False))
    print("=" * 60)
