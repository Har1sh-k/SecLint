from typing import List, Dict, Any
from langchain_core.messages import HumanMessage
from langchain_openai import ChatOpenAI, OpenAIEmbeddings
from langchain_community.vectorstores import Chroma
from langgraph.prebuilt import create_react_agent
from status_logger import logger
from dotenv import load_dotenv
import json

from tools.vuln_tools import understand_context,fetch_secure_coding_guidelines, generate_recommendations

tools = [
    understand_context,
    fetch_secure_coding_guidelines,
    generate_recommendations,
]

def create_secure_coding_agent():
    llm = ChatOpenAI(model="gpt-4o", temperature=0.0)
    system_prompt = """You are a methodical Secure Coding Analyst. Your purpose is to analyze a user-provided code snippet by following a strict, sequential workflow.
    You must use the following tools in this exact order:
    1.  understand_context: First, call this tool with the user's code snippet to get a clear summary of its function, purpose, and dependencies. This summary is essential for the final analysis.
    2.  fetch_secure_coding_guidelines: Second, use the same code snippet to call this tool and retrieve relevant security best practices from the knowledge base.
    3.  generate_recommendations: Finally, call this tool. You MUST provide it with the original `code_snippet`, the `context` summary from step 1, and the `best_practices` from step 2. This tool will generate the final, actionable security advice.
    Your final answer to the user should be the output from the `generate_recommendations` tool.
    If, after this full analysis, no security vulnerabilities are found, the final step will produce a report indicating that. Do not skip any steps."""
    agent_llm = llm.bind(system_message=system_prompt)
    return create_react_agent(tools=tools, model=agent_llm)

def code_scanner(code_chunks: List[str]):
    """
    Scans code chunks for vulnerabilities and generates recommendations.
    
    Args:
        code_chunks (List[str]): List of code snippets to scan.
        
    Returns:
        List[Dict[str, Any]]: List of dictionaries containing code snippet, context, best practices, and recommendations.
    """
    agent = create_secure_coding_agent()
    results: List[Dict[str, str]] = []

    for chunk in code_chunks:
        logger("info", f"Processing code snippet:...") 

        code = chunk.get("code")
        if not code:
            logger("error", "chunk missing 'code'; skipping")
            continue
        try:
            response = agent.invoke({"messages": [HumanMessage(content=code)]})
        except Exception as e:
            logger("error", f"Agent invocation failed: {e}")
            continue
        recs = {
            "code": code,
            "context": "",
            "best_practices": "",
            "recommendations": "",
            "final_summary": "",
        }
        for msg in response.get("messages", []):
            tool_name = getattr(msg, "tool", None) or getattr(msg, "name", None)

            if tool_name == "understand_context":
                recs["context"] = msg.content.strip()

            elif tool_name == "fetch_secure_coding_guidelines":
                recs["best_practices"] = [line.strip() 
                                          for line in msg.content.splitlines() 
                                          if line.strip()]

            elif tool_name == "generate_recommendations":
                try:
                    payload = json.loads(msg.content)
                    recs["recommendations"] = payload.get("recommendations", [])
                    if "best_practices" in payload:
                        recs["best_practices"] = payload["best_practices"]
                except json.JSONDecodeError:
                    recs["recommendations"] = [msg.content.strip()]

            elif not tool_name and msg.content.strip():
                recs["final_summary"] = msg.content.strip()


        if recs["recommendations"] == ["No security issues found."]:
            recs.update({
                "best_practices": [],
                "recommendations": [],
                "final_summary": "<No summary available>"
            })

        results.append(recs)
        
    print("\n Secure Coding Scan Results ")
    print("=" * 60)
    print(json.dumps(results, indent=2, ensure_ascii=False))
    print("=" * 60)

